// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "lyrics-library/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// TrackCache is an autogenerated mock type for the TrackCache type
type TrackCache struct {
	mock.Mock
}

// ArtistTracks provides a mock function with given fields: ctx, artist
func (_m *TrackCache) ArtistTracks(ctx context.Context, artist string) ([]*models.Track, error) {
	ret := _m.Called(ctx, artist)

	if len(ret) == 0 {
		panic("no return value specified for ArtistTracks")
	}

	var r0 []*models.Track
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Track, error)); ok {
		return rf(ctx, artist)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Track); ok {
		r0 = rf(ctx, artist)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Track)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, artist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveArtistTracks provides a mock function with given fields: ctx, artist, tracks
func (_m *TrackCache) SaveArtistTracks(ctx context.Context, artist string, tracks []*models.Track) error {
	ret := _m.Called(ctx, artist, tracks)

	if len(ret) == 0 {
		panic("no return value specified for SaveArtistTracks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*models.Track) error); ok {
		r0 = rf(ctx, artist, tracks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTrack provides a mock function with given fields: ctx, _a1
func (_m *TrackCache) SaveTrack(ctx context.Context, _a1 *models.Track) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveTrack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Track) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Track provides a mock function with given fields: ctx, artist, title
func (_m *TrackCache) Track(ctx context.Context, artist string, title string) (*models.Track, error) {
	ret := _m.Called(ctx, artist, title)

	if len(ret) == 0 {
		panic("no return value specified for Track")
	}

	var r0 *models.Track
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Track, error)); ok {
		return rf(ctx, artist, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Track); ok {
		r0 = rf(ctx, artist, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Track)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, artist, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTrackCache creates a new instance of TrackCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTrackCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *TrackCache {
	mock := &TrackCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
